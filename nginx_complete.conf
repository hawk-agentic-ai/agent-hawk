 server {
      listen 80 default_server;
      server_name 3-91-170-95.nip.io;
      return 301 https://$server_name$request_uri;
  }

  server {
      listen 443 ssl http2 default_server;
      server_name 3-91-170-95.nip.io _;

      ssl_certificate /etc/letsencrypt/live/3-91-170-95.nip.io/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/3-91-170-95.nip.io/privkey.pem;

      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

      root /var/www/3-91-170-95.nip.io;
      index index.html;

      location / {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
          try_files $uri $uri/ /index.html;
      }

      location /api/ {
          proxy_pass http://localhost:8004/;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-Proto $scheme;
          add_header 'Access-Control-Allow-Origin' '*' always;
      }

      location /health {
          proxy_pass http://localhost:8004/health;
          proxy_set_header Host $host;
      }

      # Dify Adapter proxy
      location /dify/ {
          add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
          proxy_pass http://localhost:8010/;
          proxy_http_version 1.1;
          proxy_buffering off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-Prefix /dify;
          proxy_set_header X-Public-Base $scheme://$host/dify/;
          proxy_set_header X-Original-URI $request_uri;
          proxy_set_header Authorization $http_authorization;
          proxy_set_header Accept "text/event-stream";
          proxy_cache_bypass $http_upgrade;
          proxy_read_timeout 86400;

          # Drop upstream CORS to avoid duplicates; set unified CORS below
          proxy_hide_header Access-Control-Allow-Origin;
          proxy_hide_header Access-Control-Allow-Credentials;
          proxy_hide_header Access-Control-Allow-Headers;

          # CORS: reflect caller origin for credentialed requests
          add_header 'Access-Control-Allow-Origin' "$http_origin" always;
          add_header 'Access-Control-Allow-Credentials' 'true' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
          add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Range' always;
          add_header 'Vary' 'Origin' always;

          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Max-Age' 86400 always;
              return 204;
          }
      }

      # MCP Data Server proxy
      location /mcp/ {
 	add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
          proxy_pass http://localhost:8009/;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Authorization $http_authorization;
          proxy_cache_bypass $http_upgrade;
          proxy_read_timeout 86400;
          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
          add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
      }
  }
