Instruction Type,Key Parameters Extracted,In-depth Data Fetching & Lookup Process
Utilization (U),"exposure_currency, hedge_amount_order (optional)","The primary goal is to perform a pre-trade feasibility check before a hedge is created.<br><br>1. Read position_nav_master: I query this table to get sfx_position, nav_amount, and nav_type for the requested currency. This is the base for all calculations.<br>2. Read allocation_engine: I check for the hedged_position to see how much of the exposure is already hedged.<br>3. Read buffer_configuration: I retrieve the buffer_percentage and car_exemption_flag to apply to the unhedged_position calculation.<br>4. Read threshold_configuration: I perform the critical USD PB deposit check by looking up the warning_level, critical_level, and maximum_limit for the exposure currency to prevent regulatory breaches.<br>5. Insert hedge_instructions: I capture the initial request details, including the instruction_type and exposure_currency."
Inception (I),"exposure_currency, hedge_amount_order, order_id, sub_order_id, hedge_method","This triggers a multi-stage, end-to-end pipeline from Stage 1A to Stage 2.<br><br>Stage 1A (Pre-Check):<br>1. Insert hedge_instructions: The request is captured with all mandatory fields.<br>2. Read entity_master & position_nav_master: Entity and position data are fetched for validation.<br>3. Read currency_configuration: The currency type (Matched, Mismatched, or Mismatched with Proxy) is determined. This is a critical step for selecting the correct booking model in Stage 2.<br>4. Apportionment Engine (Calculation): The unhedged_position is calculated, and the hedge_amount_allocation is assessed.<br>5. Insert hedge_business_events: An event is created with status 'Approved' for Stage 2 processing.<br><br>Stage 2 (Execution):<br>1. Read instruction_event_config: The appropriate booking model (e.g., A-COI, B-COI) is assigned based on the nav_type and currency_type.<br>2. Read currency_rate_pairs & currency_rates: I fetch both onshore_rate and offshore_rate for mismatched currencies, and historical_rate and prevailing_rate for all currencies to perform rate differential calculations.<br>3. Insert deal_bookings: A series of deals (e.g., 6 for a matched currency, 10 for a mismatched currency) are booked into this table.<br>4. Insert gl_entries & gl_entries_detail: The accounting entries are created and packaged for Stage 3.<br>5. Update hedge_business_events: The stage_2_status is updated to 'Processing' and then 'Completed' upon success."
Rollover (R),"previous_order_id, exposure_currency, hedge_amount_order","This instruction triggers Stage 1B, which handles existing hedge modifications.<br><br>1. Read hedge_business_events: I look for an existing hedge relationship using the previous_order_id to validate it's an active position.<br>2. Read rollover_configuration: I check for eligibility rules, such as min_rollover_days and max_early_rollover_days.<br>3. Insert hedge_business_events: A new rollover event is created. If the rollover is partial, a termination event is also created.<br>4. Update allocation_engine: Unlike a simple check, Stage 1B performs an actual UPDATE operation to reallocate the hedge amount."
Termination (T),"previous_order_id, hedge_amount_order (optional)",This instruction also triggers Stage 1B to close an existing hedge position.<br><br>1. Read hedge_business_events: I find the hedge to be terminated and calculate the outstanding_notional.<br>2. Read termination_configuration: I check rules for fx_spot_required and accounting_treatment.<br>3. Insert hedge_business_events: I create a termination event and update the original hedge's status.<br>4. Update allocation_engine: I unwind the original allocation to reflect the closed position.
Monitoring (MONITOR),"query_type, currency (optional), entity_filter (optional)","This instruction type does not initiate a new hedge but provides real-time data insights.<br><br>1. Read position_nav_master & hedge_business_events: For a position query, I fetch sfx_position and nav_amount across all entities.<br>2. Read usd_pb_deposit & risk_monitoring: For a breach check, I query these tables to find any breach_status or violations against pre-defined thresholds.<br>3. Read audit_trail & hedge_business_events: For a status check, I join these tables to provide a summary of stage_2_status and hedge_execution_status."
MX Bookings,"order_id (DMCT order ID), month_year",This category queries the results of successful Stage 2 processing. <br><br>1. Read deal_bookings: I search this table for deal_booking_id using the provided order_id. I can also filter by created_date to get all bookings within a specific month and year.<br>2. Read hedge_instructions & hedge_business_events: I cross-reference the booking details with the original instruction via instruction_id to provide full context.
GL Entries,"currency, month_year, entity","These prompts are financial reporting queries that fetch accounting data after a hedge has been booked in Stage 2. <br><br>1. Read gl_entries: I filter this table using the currency_code and posting_date to retrieve specific journal entries. <br>2. Read gl_entries_detail: I use this table to get a granular breakdown of each GL entry, including debit_account, credit_account, amount_sgd, and entity_id. I can also filter by entity_id or entity_type to show entries for a specific entity or department."
General / Others,"entity, number_of_days, month_year, list of ccys","This is a broad category for portfolio-level inquiries.<br><br>1. Read hedge_business_events: I list all hedge details for a given entity_id or query all hedges sorted by maturity_date.<br>2. Read usd_pb_deposit: I retrieve total_usd_pb_deposits and current_hedge_exposure to provide an overview of the USD PB deposit status.<br>3. Read allocation_engine & car_master: I look up optimal_car_amount, hedged_position, and unhedged_position across various currencies to create a summary table."